name: CI/CD

on:
  push:
    branches:
      - dev
      - main
      - corp/**/main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
      - name: Lint
        run: yarn lint:fix

  # unit-test:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout commit
  #       uses: actions/checkout@v3
  #     - if: steps.cache.outputs.cache-hit != 'true'
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20
  #         cache: 'yarn'
  #     - name: Install dependencies
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: yarn install --frozen-lockfile
  #     - name: Test
  #       run: yarn test

  e2e-test:
    needs: [lint]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      # - name: Install dependencies
      #   run: npm install -g yarn && yarn
      # - name: Get downloaded dependencies
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: node_modules
      #     path: node_modules

      # - if: steps.cache.outputs.cache-hit != 'true'
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 20
      #     cache: 'yarn'
      # - if: steps.cache.outputs.cache-hit != 'true'
      #   name: Install dependencies
      #   run: yarn install --frozen-lockfile --ignore-scripts

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 20
      #     cache: 'yarn'
      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ./node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      # - name: Install dependencies
      #   if: steps.npm-cache.outputs.cache-hit != 'true'
      #   run: yarn install --frozen-lockfile

      - name: Setup NodeJS
        uses: ./.github/actions/setup-node

      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ./node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright Browsers
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps

      - name: Run Playwright tests
        run: yarn test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # semantic-release:
  #   needs: [unit-test, e2e-test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout commit
  #       uses: actions/checkout@v3
  #     - name: Semantic Release (Only branch "main")
  #       if: github.ref == 'refs/heads/main'
  #       uses: cycjimmy/semantic-release-action@v3
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #   permissions:
  #     contents: write
  #     issues: read

  # deploy-dev:
  #   needs: [semantic-release]
  #   if: github.ref == 'refs/heads/dev'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger webhook
  #       run: |
  #         URL="${{ secrets.DEPLOY_DEV_WEBHOOK_URL }}"
  #         curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  # deploy-main:
  #   needs: [semantic-release]
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger webhook
  #       run: |
  #         URL="${{ secrets.DEPLOY_MAIN_WEBHOOK_URL }}"
  #         curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  # deploy-corp-somdet-main:
  #   needs: [semantic-release]
  #   if: github.ref == 'refs/heads/corp/somdet/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger webhook
  #       run: |
  #         URL="${{ secrets.DEPLOY_CORP_SOMDET_MAIN_WEBHOOK_URL }}"
  #         curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  # deploy-corp-chula-main:
  #   needs: [semantic-release]
  #   if: github.ref == 'refs/heads/corp/chula/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger webhook
  #       run: |
  #         URL="${{ secrets.DEPLOY_CORP_CHULA_MAIN_WEBHOOK_URL }}"
  #         curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  # deploy-corp-navy-main:
  #   needs: [semantic-release]
  #   if: github.ref == 'refs/heads/corp/navy/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger webhook
  #       run: |
  #         URL="${{ secrets.DEPLOY_CORP_NAVY_MAIN_WEBHOOK_URL }}"
  #         curl -X POST -d {} "$URL" -H "Content-Type:application/json"
