name: CI/CD

on:
  push:
    branches:
      - dev
      - main
      - corp/**/main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
      - name: Lint
        run: yarn lint:fix

  unit-test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
      - name: Run Unit Tests
        run: yarn test

  e2e-test:
    needs: [lint]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
      - name: Store Playwright's Version (Use For Caching)
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache Playwright Browsers (Using Playwright's Version)
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers (Cache Hit)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps
      - name: Install Playwright Browsers (Cache Miss)
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: yarn playwright install-deps
      - name: Run E2E Tests
        run: yarn test:e2e
      - name: Store Artifacts From Failed Tests
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  semantic-release:
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3
      - name: Semantic Release (Only branch "main")
        if: github.ref == 'refs/heads/main'
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    permissions:
      contents: write
      issues: read

  deploy-dev:
    needs: [semantic-release]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Webhook
        run: |
          URL="${{ secrets.DEPLOY_DEV_WEBHOOK_URL }}"
          curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  deploy-main:
    needs: [semantic-release]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Webhook
        run: |
          URL="${{ secrets.DEPLOY_MAIN_WEBHOOK_URL }}"
          curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  deploy-corp-somdet-main:
    needs: [semantic-release]
    if: github.ref == 'refs/heads/corp/somdet/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Webhook
        run: |
          URL="${{ secrets.DEPLOY_CORP_SOMDET_MAIN_WEBHOOK_URL }}"
          curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  deploy-corp-chula-main:
    needs: [semantic-release]
    if: github.ref == 'refs/heads/corp/chula/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Webhook
        run: |
          URL="${{ secrets.DEPLOY_CORP_CHULA_MAIN_WEBHOOK_URL }}"
          curl -X POST -d {} "$URL" -H "Content-Type:application/json"

  deploy-corp-navy-main:
    needs: [semantic-release]
    if: github.ref == 'refs/heads/corp/navy/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Webhook
        run: |
          URL="${{ secrets.DEPLOY_CORP_NAVY_MAIN_WEBHOOK_URL }}"
          curl -X POST -d {} "$URL" -H "Content-Type:application/json"
